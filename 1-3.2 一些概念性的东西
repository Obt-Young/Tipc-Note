#1 TCP协议目前是被广泛应用的，其稳定、广为人知的（ubiquitous），但是在要求实时性的集群环境中，它的缺点也是显而易见的：
    1- 缺乏地址透明化和地址解析（就是必须得记得住IP地址），它需要诸如DNS和CORBA Naming Service这样的外界软件，来辅助完成
       地址的查找，但是大多数情况下这样做的消耗又很大。
         （理解：TCP协议不阐述和记录地址相关的信息，因此每次建立连接（三次握手），对于用户层以及路由层不透明，比如增加路由和重组
           本地子网导致的IP网段改变（即不透明），需要通过软件和物理设备完成IP地址的解释和翻译，这样的话就变相消耗的网络资源，稍显
           笨重）
    2- TCP在节点内通讯同样需要经过三次握手和四次挥手，这样就无故消耗的时间和资源；而UNIX自有的节点内通讯（消息队列，管道，SOCKET），
       灵活性有比较差；因此需要一个高效灵活的，能同时完成节点内和节点间通讯的网络协议
    3- TCP是面向连接的，即必须端到端，点到点（编程的时候都可以发现，必须指定IP和PORT），因此无法完成一到多的广播/多播场景
    
#2 TCP没有任何拓扑信息服务和拓扑订阅服务，而这些服务在集群环境中的管理和使用来说，都是必要的。（topology service）

#3 其实TCP是一个通用的服务，不能说他怎么不好，它是非定制化的，可适用的场景比较广泛，因此可能显得在某个领域不那么专长。
   在集群环境中，TCP的优点也正是它的缺点，因为很多判断和逻辑在集群环境下是不必要的（比如TCP头中的很多字段都是可以省略的）。
   
#4 TIPC适用在如下场景中（TIPC设计的本意也是用来专门服务于这些场景的）：
   1- 大部分消息都是直接送达，不做任何路由跳转，即集群内所有节点都是直接互通的，不需要A先到B，才能到C；A,B和C是满连接，任意两两都是
      可直接沟通的；
   2- 大部分消息的传输对时间要求苛刻，要很短；
   3- 大部分消息都只在集群内部传输（节点不在集群内部的话，需要用其他协议完成传输，TIPC只服务于自己组建的集群）
   4- 丢包率低；重传频繁(不是很懂？？？？)
   5- 可用带宽和内存比较高（TIPC对资源消耗较大，比如心跳包的维持，如果想快，那就用性能来换）
       （注：TCP对于资源消耗不大，但是快不起来，因为它被设计的时候就是一个通用的协议，是服务大众的，不是服务某个特例场景）
        （这里也可发现，并不是TIPC有多好，只是在某个特定的应用场景中，TIPC能充分利用充沛的资源来完成性能要求，大部分情况下，集群中的
          硬件资源是相当充沛的，互联网公司可见一斑）
   6- 

