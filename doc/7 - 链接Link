#1 - internal报文
      internal报文头和payload报文头有很多相似的地方，下面说一些不一样的地方：
      Sequence Gap：LINK_PROTOCOL使用
      Broadcast Gap After：BCAST_PROTOCOL使用
      Broadcast Gap To:BCAST_PROTOCOL使用

#2 - link的创建
      
      #2.1 - link的建立
          TIPC是寄生在网卡上的，因此当网卡启动后，TIPC就以网卡的参数（IP，网关，掩码等）和使用这些参数所能到达的最大网络范围作为基础。与所有可能的节点
          建立连接。
          
          要求网卡具备广播能力（比如Ethernet）。
          
          一旦TIPC检测到网卡启动了，就阶段性地通过网卡发送建立连接的广播报文，通过这种方式通知大家自己的存在。当某个节点接到这个报文了，那么就在自己的
          节点上建立一个端，并应答广播报文，那么发送端在收到应答报文后，就在自己这边也建立一个对应的端。这样link就算建立完成了。
          
          比如下面这样<1.1.1>先发一个bcast，<1.1.2>和<1.1.3>分别应答ucast：
                                                  -------------
                                                 | <1.1.3>     |
                                                 |             |
                 ucast(dest:<1.1.1>,orig:<1.1.3> |             |
                <------------------------------- |             |
                                                 |             |
                                                  -------------
 --------------
| <1.1.1>      |
|              | bcast(orig:<1.1.1>,dest:<1.1.0>)
|              |-------------------------------->
|              |
|              |
 --------------
                                                  -------------
                 ucast(dest:<1.1.1>,orig:<1.1.2> | <1.1.2>     |
                <------------------------------- |             |
                                                 |             |
                                                 |             |
                                                 |             |
                                                  -------------


#3 - link的激活
      link的激活和监视完全由TIPC协议来完成，有限状态机如下：
      
 ---------------                               ---------------
|               |<--(CHECKPOINT == LAST_REC)--|               |
|               |                             |               |
|Working-Unknown|----TRAFFIC/ACTIVATE_MSG---->|Working-Working|
|               |                             |               |
|               |-------+      +-ACTIVATE_MSG>|               |
 ---------------         \    /                ------------A--
    |                     \  /                   |         |
    | NO TRAFFIC/          \/                 RESET_MSG  TRAFFIC/
    | NO PROBE             /\                    |     ACTIVATE_MSG
    | REPLY               /  \                   |         |
 ---V-----------         /    \                --V------------
|               |-------+      +--RESET_MSG-->|               |
|               |                             |               |
| Reset-Unknown |                             |  Reset-Reset  |
|               |----------RESET_MSG--------->|               |
|               |                             |               |
 -------------A-                               ---------------
  |           |
  | BLOCK/    | UNBLOCK/
  | CHANGEOVER| CHANGEOVER END
  | ORIG_MSG  |
 -V-------------
|               |
|               |
|    Blocked    |
|               |
|               |
 ---------------
      
      
      
      
#4 - link MTU 谈判
    在网络传输中，每个网络设备的MTU值都不一样，因此TIPC会通过算法查找网络中所有设备中MTU的最大值来作为MTU值，同时，在同一个网路中，正向和反向
    的MTU都可能是不一样的。
    
    有算法来获取合适的MTU值，这个算法就是MTU谈判
    
#5 - link 连贯性检查
    正常通讯的情况下，link的双端都处在Working-Working状态。
    当发现异常时，进入Working-Unknown状态。（具体见官方文档）
    LINK_PROTOCOL 报文
    
#6 - 顺序控制和重传
    
#7 - 报文绑定
      有时候，因为网络、网卡的阻塞、接收方的阻塞（link层的发送窗口溢出），报文无法立刻通过网卡送达至目的节点。这个时候要重新做相应的配置，但是又不能
      影响重要的用户发送消息。
    
      这个时候就要把message打包成packet做一个缓冲，当故障解决后，package会被发送到对端，对端再把packet分割成原来的那些message。
      
      TIPC的报文传输从不等待，和TCP的nagle算法不同，TIPC通过打包并生成包来实现缓冲，而不是存在发送端积攒。
      比如之前每一个报文发送一次，现在把10个报文组成一个再发送，但是如果没凑到10个，那也发送。
      
#8 - 报文分片
      当一个报文比MTU值大时，会产生分片，Internal报文会被设置成MSG_FRAGMENTER。
      
#9 - link的阻塞控制
      TIPC使用通用的滑动窗口协议（sliding window protocol）处理消息运输流。
      
#10 - link的负载均衡 和 主/从
       同一个link，相同的priority代表负载均衡，不同的priority代表主/从
      
#11 - link的失败恢复
        #11.1 - Active Link 失败
        
        #11.2 - Standby Link 失败
        
        #11.3 - 负载均衡情况下
        
        #11.4 - 主/从情况下
        
        #11.5 - link的删除
        
        #11.6 - Message Bundler Protocol
        
        #11.7 - Link State Maintenance Protocol
        
        #11.8 - Link Changeover Protocol
        
        #11.9 - Message Fragmentation Protocol
      
      
      
      
    
    
    
    
    
    
    
      
      
      
      
